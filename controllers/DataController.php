<?php
/**
 * Created by PhpStorm.
 * User: zhoutian
 * Date: 2019/3/23
 * Time: 15:03
 */

namespace app\controllers;


use app\behaviors\DepartmentBehavior;
use app\behaviors\LoginBehavior;
use app\logic\TaskForm;
use app\models\Customer;
use app\models\Department;
use app\models\Project;
use app\models\Task;
use app\models\TaskRecord;
use app\models\User;
use phpDocumentor\Reflection\DocBlock\Tags\Var_;
use yii\data\Pagination;
use yii\db\Query;
use yii\helpers\Url;
use yii\web\UrlManager;

class DataController extends Controller
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'access' => [
                'class' => LoginBehavior::className(),
            ]
        ];
    }

    public function actionIndex()
    {
        $departmentList = Department::getVisibleDepartment();
        if (\Yii::$app->request->get('no')) {
            $userIds = TaskRecord::find()->alias('tr')->leftJoin(['u' => User::tableName()], 'tr.user_id=u.id')
                ->where(['>', 'tr.created_at', strtotime('today')])->groupBy('tr.user_id')
                ->select('user_id')->column();
            $query = User::find()
                ->where(['not in', 'id', $userIds]);
            $total = $query->count();
            $query->orderBy('id desc')->select('*');
        } else {
            $query = TaskRecord::find()->alias('tr')
                ->leftJoin(['t' => Task::tableName()], 'tr.task_id = t.id')
                ->leftJoin(['u' => User::tableName()], 'u.id = t.user_id')
                ->where(['in', 'u.department', array_keys($departmentList)])
                ->andWhere(['>', 'tr.created_at', strtotime('today')]);
            $total = $query->count();
            $query->orderBy('tr.created_at desc')->select('tr.*,t.id as tid,t.content,t.type,u.realname');
        }
        $pagination = new Pagination(['totalCount' => $total, 'defaultPageSize' => 20]);
        $list = $query->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $params = \Yii::$app->request->getQueryParams();
        $userTotal = User::find()->where(['dismission_time' => 0])->count();
        $userDone = TaskRecord::find()->alias('tr')->leftJoin(['u' => User::tableName()], 'tr.user_id=u.id')
            ->where(['>', 'tr.created_at', strtotime('today')])->groupBy('tr.user_id')->count();
        $userNotYet = $userTotal - $userDone;
        return $this->render('daily', [
            'list' => $list,
            'pagination' => $pagination,
            'params' => $params,
            'userNotYet' => $userNotYet,
            'userDone' => $userDone,
            'results' => \Yii::$app->params['result']
        ]);
    }

    public function actionDailyRecord()
    {
        $departmentList = Department::getVisibleDepartment();
        $total = User::find()->where(['in', 'department', array_keys($departmentList)])->count();
        $pagination = new Pagination(['totalCount' => $total, 'defaultPageSize' => 20]);
        $users = User::find()->where(['in', 'department', array_keys($departmentList)])->offset($pagination->offset)->limit($pagination->limit)->all();
        return $this->render('daily-record', [
            'users' => $users,
            'results' => \Yii::$app->params['result'],
            'pagination' => $pagination
        ]);
    }

    public function actionUserDaily()
    {
        $userId = \Yii::$app->request->get('id');
        $user = User::findOne($userId);
        $departmentList = Department::getVisibleDepartment();
        if (!$departmentList[$user->department])
            exit('没有权限');
//        $departmentList = Department::getVisibleDepartment();
        $departmentList = [];
        $query = Task::find()->alias('t');
        $query->leftJoin(['u' => User::tableName()], 'u.id = t.user_id');
        $query->where(['u.id' => $userId]);
        $pagination = new Pagination(['totalCount' => $query->count(), 'defaultPageSize' => 20]);
        $query->orderBy('t.updated_at desc')->select('u.*,t.*');
        $list = $query->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        foreach ($list as $k => $v) {
            $list[$k]['records'] = TaskRecord::find()->where(['task_id' => $v['id']])->orderBy('id desc')->all();
        }
        $params = \Yii::$app->request->getQueryParams();
        return $this->render('user-daily', [
            'list' => $list,
            'departmentList' => $departmentList,
            'pagination' => $pagination,
            'params' => $params,
            'results' => \Yii::$app->params['result']
        ]);
    }

    public function actionUserDailyDetail()
    {
        $id = \Yii::$app->request->get('id');
        $task = Task::findOne($id);
        $user = User::findOne($task['user_id']);
        $departmentList = Department::getVisibleDepartment();
        if (!$departmentList[$user->department])
            exit('没有权限');
        return $this->render('user-daily-detail', [
            'task' => $task
        ]);
    }

    public function actionProject()
    {

        $keyword = \Yii::$app->request->get('keyword');
        $progress = \Yii::$app->request->get('progress');
        $company = \Yii::$app->request->get('company');
        $query = Project::find()->alias('p');
        if ($keyword) {
            $query->andWhere([
                'like', 'p.name', $keyword
            ]);
        }
        if ($progress) {
            $progress = explode(',', $progress);
            if (!is_array($progress)) {
                $progress = [$progress];
            }
            $query->andWhere(['in', 'progress', $progress]);
        }
        if ($company) {
            $query->andWhere(['belong' => $company]);
        }
        $pagination = new Pagination(['totalCount' => $query->count(), 'defaultPageSize' => 20]);
        $query->orderBy(["FIELD(id, ".join(',',[1,2,3,4,5,6,7,10,11,8,9]).")" => true])->select('p.*');
        $list = $query->offset($pagination->offset)->limit($pagination->limit)->all();
        return $this->render('project', [
            'companies' => \Yii::$app->params['companies'],
            'params' => \Yii::$app->request->getQueryParams(),
            'list' => $list,
            'pagination' => $pagination,
            'progress' => \Yii::$app->params['project_progress'],
        ]);
    }

    public function actionProjectDetail()
    {
        $id = \Yii::$app->request->get('id');
        $customerList = Customer::find()->orderBy(' CONVERT(name USING gbk) asc')->all();
        $project = Project::findOne([
            'id' => $id
        ]);
        $userList = User::find()->where(['>', 'level', 0])->orderBy(' CONVERT(realname USING gbk) asc')->all();
        $participants = explode(',', $project->project_participants);
        $InProject = in_array(\Yii::$app->user->id, $participants) || $project->project_incharge == \Yii::$app->user->id;
        return $this->render('project-detail', [
            'customerList' => $customerList,
            'project' => $project,
            'userList' => $userList,
            'inProject' => $InProject
        ]);
    }
}